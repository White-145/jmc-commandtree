es = [
    b"eJzlWd9v0zAQ/lcmi0kbVBCGxEOemBA88YDE45giL7mmlhw72E7pNPV/x3bTNGmdH97SZmNT1SS1fbn77rvznfeA1H0OKETzgsWKcIZmKOeS2NswmCGeg8DmSaLw5gHhzaQQSVDREguC7yhEsQCsIKJEKr1+iWkBm+kMZ0Z4+Us5hMKH7VuxEPi+uaQcUbAysuwlRB+MWlhIwlL9lFNMGFrPWiYHPpN/I5/Zb30mf/HSowiCq8/uFR6f27V5QwX7xj8O4BtD5W1oB2PjJxlzO43yGFO01mJnk/meEqUpSH3AZEV2B8JnxV8uEp/5Ugkzz2OFHr7300nAHASwGJ4BKzxJIXPttag0x8UJTxW0+cqlws6q+rt6xcU8yzBLOgUmQElmqOeQehi6nxL77XTVHlBkvsOJcRXBnwJT6cRJ66mluWBqD56K++VNePU+8GNLN3mMHof6HLwVnWdYLS7OKbBULSKL74V14+WlgaR9Z4k5U4LTSIAqBItqG1Nl7G0X91L9YLJR1ND1qfxTi0621NPfCGyu4OzFOdDebbB2jgu6Z7te3xmtx0AMVhAXiovnidrHEVAzW0A+ao7r4ZhXimuR1mGPgBRW+ltnrRheml07adaM3px9c3b7zpmr64IsEhkwl3ZNcWcD8v6RN8iTgjx8c/RHZuSwGpSIvNDpkDhBeJ3UvtceZhOBPTzcQs8CNLXdm2hB5ym13tYwW+7NBpS0zsL1mIXimPUhiIxIuXl7ux/bEN3rXjnz7SNeUQ/R4FUHO47fEwzzuVeNOygbHKXMffHtwcjQPbKvqgelxcwkKR29shM87xMyf0aOFr1eTikPWn5WitUbuNQIHB7DOM+BJf8Njt4hMwjL9ige8Zx2ehDkm3P94/ZUqULk0oWI5heREWFLEAoSFCpRwElgemy+mhzd3sZG1+wapWjORQQ4Xmhw2wEjLNF9j0OVg5LANakHQ7rtG0Y7Y3KfmnQUoZhSZ+lZKbAdjOxzX/GHk+RapEVplqsGnK4KDE5RBbodMyeMyAU4qfns9o/WMJo8sr3ypkH2EKUEZCxIXqf7KJtFwz6dsBckScD1CtB01D/bS4i+X//49a0R8CR2aqbbZ7PMXkJ0vfvb/PtmQ6RShA7Cr6UP1/8AkEyzRg==",
    b"eJztWE2PmzAQ/S9WV1qqpCLtjUu1h972VLWnNkJe7BBLxqa2ibJK899rOySBxBCghu6umkSC+GM8fjNvZuwdUM85BhFYFSxRhDMwAzmXxL5G4QzwHAto/kkQ/dgBeBgUAYlVvIGCwCeKY5lTomKFt0pP30Ba4MNoBjMj+zju2Ami3XHZWlf5GgFMcYaZESYTbsdRnkAK9vvZSWh1NS8CEaYkIwoLh9RyMfuI9FeDBIUkLNXvOYWEaUlLI8uNT6r/UCJNi5HrBSM7r20/ZkGvALEie3Kic+ooX6LwQ1hHdgULerF7Pf8SM7I6Q4Z/FZBKJ1QJzzT6LqSgEPC5PqdJxYVWcbYb/ltWN3i5scZVwV0G1fr+jmKWqnVsMb4vsQ8C40QdGefRkVaEEbnGqNX2nXdoTd9CBZjnmKFW/W1LH+PW2UkNh7X6Do7OBnHKl4/0tIt28wwyl1nq8CacKcFpLLAqBIsrgfyE1HLq4JRxJF9qcFoMC06jJrybePXKdjeldU91fTOdEiSLq8Z9SX50U5pUULjE3fIhbGk6LPobpYL5IrjCtZoNLT8N0bUB5JjB87M7bHqKgT6s1ZIhp6wfwinqh94Ju2v5MEYW7pnFPII3LLHKd3e6sWShBi0jUmqogoqqqVnB8LI1gb7aWsyj4rZziNKda7eW6JgKDCvJ7NqR/y44B7WNNEePBvw7UnKMMuymVfymz9EPiG7ACEN4G/OVT+QI2voDznQm7dD1ywANdm1mCONq9Iw4n+RI3cdcb4d6pnMg94b5dxsjW5PhdJWFG+E3ecSvISxwxjfYu8PmE5+1uhUEv52lwFlKCYZezSULa1boZvuIwMPj478sI+b1tnzC2uJ/ud+v3J/qeqOZ/wNZ10Vg50uO0N8lR6lXMO9OjPcfr69EXsexa3E4di0NPa+VQ1gmguTVK9pWvg0iCZHxmiCEXUvUg+K3r9+/1LZJEqdi+mBmZtmHDqXnz88iDD+hQ7VVioAIPYi0sHe2+z9ch7qi",
    b"eJzlVkuP2jAQ/iuVVaRFohWot9xWVffUQ6U9tsjyOkMY1XFSPxArxH+v4ySQgBNISUUfKCJ24szzm29mR8xrDiQiKyu5wUySGckzjX4ZzWcky0GxYqdJ9HVHWHkoIhoM3TCF7EUA5QqYASpQG/f9hgkL5XHJ0kJ49aR6RaJdrZUpxV5bn+xnN1zLvfs/Ki2tC6htvaqWziWbJKBLX2dE88yfFRlnguyd7FmX+zoXaKiBbZf3Aw1BmVvzqBKbgjQhW45ONpVelMuzNGUy7hUYg8AUDaiA1EqZv0XkTQEVpjTKxO1ywVCehQlXxyjBD8uEDkbIGeYkhQJ0DpCwMSFbRkRSYdTtUV7+V+V0EcXLE7AoyJ3fdJUpCoyvKcruEKCMYUsDNp3lLXSo33CXohS1Lsmwu1Katl0Lii8H0c2AJIXAXng43YI2KPo8IPVL6veXate7aO5bwNKmL55mqkU0fz+/V83mTGsYWLI8k0ZlgurvmNOCMdlpcv5UgF/TB34F3frtxD2kXtjDsYqmg6D+DzIh6yXBzrEicZvCc9rC8m2jBWyBW5Op0XPfK/BQ6qcigxzQmkZWzIqTCPgiaMdtbH5E6eo5V2A+HrwbxJRbF8EwUw7OmF9K0yytOonTEJ6urKwRMTXQwsscHUbFsvANtWPNDSjj2DoyykJnDgTorgwM6QzY60F33zvzgUxSZtYPEwEyMesqTu0ZafpuMb1PCjv73w3JutscsfjL5oiRuasi5GfLeVkCl5irHmQc3Vklg6acprOFQ5SuTRcAvjOdXN9lFjVEf28XqTLxxFBYD+pQJpYhPTForjBv2jHKcNOCtuPSNcYxhFSAC5V77G8ReXr8/PypFWvkQcvcGFx85m8ReTz+vtn5/ENcFkIlokwq1B12/xO8Z29Y",
    b"eJztWN1umzAUfhdLkcKWbiS74y6a+gLTtpstslw4IZaM7dmmWhXl3WcT0uAGE0rJ2qqNIhljfHzOd36+A1tk7iSgBK1LnhoqOJohKTStLpN4hoQERdxMo+TXFpH9QwlSIIEYXJTMUGxoAdruvCWshP2DnBRO7C1RlNwwOCyiZHs40VuqLxNE7VSnonqCiZQwtNvN7sWRQpTctAjjZXEDyi7UFwmaFMRspmsmhJpOGPDcbHAlcJqKoiA8i67m0edFZOWvwmZqMPigHc4gVVDAUYFLmnpv0VlT559ia4Pb2q52bieManfHSRpF92qxS313YG9ptUdGwqN2/cQeUHucRh8WH+eRJy+DNbHB64Nixf53KKt9rwvKxTAo6fqIJAOtsVAY/pSEhWqHL+6sll6WUy5Ls1R56RJWR77GFiVJ1NNStaNqNA3tMDCsBVGK3Pl7QsbHNvtn2+H/VROXEOQBVPRPwmhbrPWtqLaeEgO4GeGnIaB7ATQmCI/MYF3mOei9rS1YhMvJiFUk7Ivz3g0xSofmRErgWacBvT03hGlmg4rqG44PSbSGkcIjPm04UsGNEgxrIyTe94ZNvTtj6RKkSurCPx6x+nwyjF+H9IF9ydXuY7jRxZ+CeFjEdXI81M7AXwdHNSTIUmq6WR5htEylKc9dKDFC+UngvhHOC+bRC2kH+vRCV64Vfq6e4eVC96o7qXdCHpGQH9LVI9ntgkHr12htlCvJLcX5meI48FmgbxCP2Q+P0+r0Lqd11KzalM9Ap4rKJjGP8irjOYpqvKFZBm1HgDXH3q6GBH3/9uPaQ4OmrYpRA25XNSRoefz9LuP4S7b360EEN6CkAvO1/v6w+wekHgS+",
    b"eJztWV9v2jAQ/yqTtUqg0opqb3mp+rAvMG1PBVlucgVPjp3ZzlbG+t13NklJhhNIC6SgUVQ7Pvt8/36+nFkSu8iAROQxl7HlSpIRyZThvhuNR0RloJl7MiS6XxK2mhQRA5b+ZJqzBwGUZRnIBJ9FDsjAt6v5kqWOezFSkEi0LLdlWrNFfUlBKZl7YtF182d5CtLiqImVnyhUzAR5Hi1f/50+4/+1rJWN69K2y2Q2hULOoyajtVmrowQZMwaSwPajugcCDGWePoBGQtGJxtfjf8Xmj2up4UfOhAmKHas0Yzq0SbOXLTw5X/oGxeYWo024GGTacDlzugnG5V7dGzZE2LKeGHBrMzAOaKweIdHFZn5RJ5udAi5uVriY9oWNF4HOAxpOK5oyG88hbLFTShkaZrlgmsJTpsEYr/mm4IAuxGHfROTrl2+fa5HojRFYVg+D+8ur6e3gNsLvZHI9mSSXwz++n1xWhm6Hw1Ck/Mfg2zD4S+kkjMDwfGO1m7dPzB4VsCcVE71ExAE83KuTUZ2UCm7sfhzdfPZWFKxut5Ujl1lu71reuNd8jWW6A+NWXlje7BKM5AJP8fngQoCc2Tn1fAZ1kfFkbi0LvisuaRFk79IDO3E0gIBgVumtCe1DMFGtOWFGfeRPFTY1ojK2mSp4ym0DzWoseJmFpEZv8Yt7cHba5znYVjm+0TvtLF8C93UR/bLJ8OpmuNOx3TmUjlM4t4N+5xy0C+xXlqqrFStptRLUWJVRDRmwGup7y2qIwsWJ1xoGBMSWrjShDwtaVKWb5nINVZrmOQ+d8b2WG9O2q5iZxnhZo3izegpoM3PKlsTKQ2kw3IUa/tsbuxzwES/q0GiOsYYLpTN8ySxCDCs+eB+wxUwJGmQMJ43cqrl8wnWnJKpgzuR+uVM6v8B+kU/c8mFFLofeMyrfmjEjle3x2rn7bdzh7w66Z+1DHxhHPSFwgqCVH6w2Y6Ik1rJ+YwniVIePFai5WQ0XaO4vtGMCJtY8q0rUGomvMiw3dM6TBEJbbLld5HFQMIx8t8o3Eblbfyb5ePwpWfmhekFZvtCS57+cIrfO",
    b"eJzlVt2KEzEUfhUJChZKqQoic1dKwYV1V7YjXtgS0sxpN5hJxvwsLaXXXnrjpW/inY+yT2KSmaEzNm3tLqyopXCSSXJ+vvOd5KyRWRWAEjS3ghomBeqiQmoWhkm/i2QBiviZRsmHNSLlpgRpMPiGKEZmHNyAW3Angyw3CpJ7tfWWehEl69pia6kaVl+FcR81lWEfl5RwtNl0G0ob5n5X4+MnboCDsqewBGqNVJ2Imak3FA+zsGoRD9MLHfGIKEVW7RPVioGlDzKIrY8efaI0Ewv3seCECeTcOeE/beJUhrbrFQibu89BJOj8cjg4b+GbE0Ovj54bp4OrdIzfn6Wvd2BzUHLcoNQuYvUiDvNdW218qMxzIrJ9OdzB7Bd32HybRPhkCddRn5wVpynmzf48OixmoNxSNUie9fqnpexQBk9jekG0hizG6Yev4wzmxHLzVsGcLe9UzW0GTGy///wluf32tZVvDgtCVzsJdzRYgcJeYC2tyPBcyRyDMMysogGGXaeVcDjiQwvSlQ0TQBWZm2TmovzYE9IALocz4Nz7zXxheYo4fZJbb7mceOAq30uNinoTbwbjdHR14h1wiFBeYKmwtSyLBLvwy3VCGpMEVQc0cKhBXk/CsQlKJnW6J2gTctHOBnDdYtU/Q0d6+/nLX0DH0k6PKXfdLiSHvKegIEz9v4xsPQhLpk38QTiZZsU+fv0Byu/15a7Py7EamvoomcZM3IAy7iFKjLLwILhLawobaxoP4F4VpQZXjq5702RPb1et3ae9a7QtZVY6j8oL5NWP79VINfaU0XSiN8t9yy0HtfAaj3V3w8uL4SAdXQzSs8uLqoKmMXgy0FSxotnoHUToTl47Vl2zLIOYibbf6dW7UYvjjEYdYwb8qSASNNj+fDpeZCV1tn2h7z7HllLHBbT5CZVnjQA=",
    b"eJzVV01uEzEUvkpkqRKR0qqAhNDsWJQdm7awIZFlZl6mRh472J6KKIoEZcGCSpwAzlAhCuWvSJzAuQInwZ6ZJDNTJ2lDKG0UxXZsP7+f73t+HiDd7wEKUDfloaaCoxbqCUWzbrDZQqIHkriRQsHjASL5ogD1GOmDxK7BSqQ8wl0pEgxcU923QhQwKNYOxmcQxnC+T6FhC+0TlkIulpPELcgEKVRMlXdKSfqosqWYyba487I2QAnlEErS1UGuygaVguNYMEg2JPQIlc5CqsM9FNzcsAbuC5a6w/MBkZQUFuZCZehOeXBvZ3dr2yo9WP7bGdrfsaWuwULiNKWRx97YTed/tsqDABUbSu5Fg3a2rY2CNoqgS1Km22iIhvbEVilitIsz854wwIwqjanCkPR0za+Fgm6FR7GxBNSadm0Q0jgGlaPE6haKbC0TIWFOjYUoUmDxk4BSJAavNsXcxaCh4bkzIWsC1E43N2/dCX+/O2zk3bu/vhW9rnlnjs2J+Ww+mOPRy9GB+WGORm8b5qs5Nd/NkR1+NEcNu+KbOWnY0XG28IX5MXpjvjTMz9Gr0cHo0AGLSEV57IyHmIT9pRDTqUcuFFxLwbAEnUqOS1SdGN2pb3Fc8y2cuHQ8ibPxWb9WvRcK5gC3Uwn01FobR8rnI85G0AEenqWEKa9GY7zXNeFp8gQcbYtOgNYSovdurDHgsd7DGc5uFBiEqNlEZaaFIrF6nkuuTQFz0apATw2K7SCjUUXtmkElslyARxDt5s6vM6n1V/SEaK7IiTsW+mnT+Wm6scg5uB6/Ohwq7vsvXpuFMG+mWLNH1LHlTmjm83LDy/dhnYnAVMXOOfgq8yWWQPQ0HFeLKHcvQpSngnJcePi6c0TZCsJaLHw0qYGozQucrBe3TOjHy1R4T0KXPl8oefTaXlCn6+7HXUmfg2WOEkpXz6o6LqF6xpyW9t4guZ/KRF8a9P88qWpC2dXNpQsoun6zStKlcq2WNMFlK68zAzWRPpmLLingvjp7uXDMcfU1S3YLxV4g4eUpqLXibLd0Qpur5biWP3vVu2yx4Ib/20R5OVXRxL8rKofsw2lWwTOr5p9T688uNma/57z1+spe5LOc4fcuVY8Io75Udd6r7iqH+vXb89W2l/h8L1E0N7fpeca/N58sse1b3ZL71D7kDxszi/iVPtY7PqMjUKGkvfIDfK7dS6GWKrxHowh8R4Dlif07awK0u/1wqwIJGnoVoxrcrqwJ0L3pxzn5dpQjfMrihPDovs2ZqSXz8A9n8x2J",
    b"eJztmM2O0zAQx18FWVRqoIi23HLjsC+wwAmQ5XUmqSXHDo5TqKpKwFNw5cQVwQWBxDOkb4SdpG3SjUJSUhZWqaom8cfY8/dvJrXXSK8iQC7yE0E1kwJNUCRjlt260wmSEShin2LkPl8jkjdyUQwaL4li5IoDpgqIBsxZrE3/JeEJ5M0FCa3xoqSoQu56NypRiqwqXTaTP/i+3Jjfw6D57GqGrVQVt8alJAgg1uCZ4pjKrCWXlHC0MZYnJecVRMZhHCZcM6xZePDtyO2OM2A1Ix8cIqFMhK4xJpLwCpSpKG5cNAqJXox9LqUajziIQC9wZnBcOGkX1Hk4dxzrW8tVDsyDXWKcj9+Lx1llk9NlptquYOZHk9G9YG2VHI/MKIWCzHkwc+7NnYpFD3xiaKhKYwwfk3N2QbN+/6Wg92enScr8g6LwKiG8PhipDCOi6oS8noR2NRreWK2yi1VOmyjhNkMSFTMRmLKIEyZQn0mr6uxJ0dM2oEkUgfAa6Wudt0+h8l9N9TfE1z5WBrxaKpZ+Sr9t36U/0p/unVJCseadM+t4G4B7LZU34NYBt48WtfTLb3HjEBC6Gng70i/WyuozENeBuO377VvD3Pf088DcKQoawFbDS7UTcx/Srzlzw0v1BPkU+KBAULh1zDUc7/S4cNWdKp6dw+i8tdGaANjZDqzBZtCE1De4Je2+y+j6N7H7a757kj53lP3VsDINOC4dtV5nYleJiy3z8UyOpM6Zv1vC1LarzdMZqQ2nUQpCucwPcbGXRJxRovs62Gwfm30l/7ppexBTxaKy9r2cRVcQYjFeMM+DuiHABJ8pzi4uenr57KLiP6O1EzMxbntlFxc9PnxeJNPpIy8nbp9SOAeqn5TO7Ta/AJVaU/w=",
    b"eJzdVE1PwzAM/S8+T6iIW25I9IYEmoALVJXXepulNAlJOjFN/e8k/WAtKwLtxqpKduOP9+KX9AB+bwgErGtVeNYKFmC049YVyQK0IYvxy4F4PQB2SQIc+XyHlnElKTiyplDZ2i5RYRXbDilDEMRhQJyEeleAQeeoDGuu0G2a1AVKaJrFqOcIbdRQ1dWKbAj0jkiukqbJYuUXbV4fWdN7jdLN0i50ZdDOgaC1uJ/W9BFPHz4EWhPIaBXLQxfHahM3JpEVBDLnv9lfpvDDWMlW7Fwn8PfRZv9b5utO5hOhw8T3ZPMtutxY3rGkzTz7k+gIjQJKWG6NgLv0Jb1/eEyXFzS1bI5aSa6wbPo/wu+X4KwjzC7fclnSHMR07k/L53SyTS5mibGnWNUaAbfH561OkpuyU21QPV4JD80nyKO1kg==",
    "",
    b"eJzFU9tugzAM/Rc/V1P3mtd+RosiN3NppFxQErpWiH9fEgiDle5hVTUJQczx5fg47iDcGgIGdCETYAON9TJIa4BtN2AbcpgsD2zfAYoBAXniF3QSj4p4oGvgPqALnn/KcI45LqhaGkIM6pRdWN2go4IB60pddA5vy5gRSYkjkD8MDodEDp2Xpo5mo1Aa6Dfd35+qj+9CcKB1T6+OMC/gzBgF4+KMgWvyHuvk4UlREcm0SkHfV49lzPkEGkGKF/0nHarEbnIVqBQ/tWaw1yQuIM/2fSdLOaWRYWe1RvPh14Ttl+U9hR8TV2TqB8MujiskFtB4ZDDl8sJmN2VjvzCfz8j+BeP5pU8nNZ8Xfq5LMcj9P21+l8irulLDtPpILgLjgb2/bedxlKk/OdDXXmq6kmgD7Sah1651lTZy2Lb8+0Yu6wf9F71DwPU=",
    b"eJy9VMFqwzAM/ZUitlsOhd18GaOX7TbWwg5bMZqjtobEDrZTWkL+fbbbZA1xR0vZwFiyJMtPT8INuH1FwGBVK+GkVpBBpa2MKptmoCsyGE4W2EcDeAhiYMnxLRqJXwXxqjZr8je3WNR0CFRYhrRB2M4DrOmeQ2NwP7xx9DjaOe+IgoHQZYkqt3cBFxor1dpbqwKlgjZrrljL1u8drBKd2CRgkapLb46CwXzx9LaY8/eXxTO0PkF2rn5hCB3xQlqXZOFouYSG64r6rcYOXeLZgeuo9ly/kimltbHlGVih45V1SPpfJKRnwZF1E98Zdv84+ayn04c87jQJjpvn4y+oPCWw0AKLEYOGKs8aX2nDCcWGS3WeQKly2vEEliFUb0sFXQQ4gfcn9Smwmxg4/6v4gIKffEVjEjonj+cxmuHIYJ7P+spG8+F7sQxo+le83nMt3awrof0GlOvJsQ==",
    b"eJzVVl1q20AQvsp2aaEFERQ/9EFXaY3YyGshkFbqajfEGEGSlxTaJz8WeoSC+yOq1o16hdEVepLOruXYsuPYLcFgbMur+dmZ+UbzrcZUjTJOPTrUIlBRKqhDszSP7NJzHZpmXDJzl1Pv1ZiyuZFHo6F/zmTEzmLu8zeaxTl6nrNY87mhYInZNkiTjEm+0FFvvAjIpGSjrk+rETo54xJV7cJzT9zCGf//t1/gdZHRPI/NfBbVWFW7bKVCoTAPUmsXpwGLaVH0t2OTc7UEpxOvg00n4j7JZCzP+eCeXHZXt4HpKWKKwDgHSDvVKtP3Qbg7bcUvjKP98yh8hKq5gRK+Qk3gFkoCv5tLqKGC71A3b2EG9QmBDyj5BVM0+AZTgpcSFVMom2sCn1E3a96jLTpXcNtco/wSf1doXjdX5h5+OMRKZlAR+IKf0ioqgsErK6/NmDCZRyI0fYlZJOih4MwkH0YXjwDna+26vZeDPzeTTjUxD1kwsuV0CzrkyJ8e88iHeBNHuXrMriMwD7bcxNt7MyZDnXCh8ge3vGvKfmSydBzwIdPxWvnovz4hqw9UKDlTy2hrYP1L/3Yhtf353Kir51qWPG6md4+R6T8h39ZkzsFI1j8NpRNkdSRpw/5PCEwMLyO5V4ay29PAsjtKS9Jz92DoIBVKprEvudJS+CuvQHdYrHPgMTT8KI/2SfOuPWvtsfsMg/h2s+dY1ostzeyb2Vz2ylkZ8YSJwVPFkRSLv59jBTw=",
    b"eJydUctugzAQ/JdVewqq6NWXnPIDVXsqEdqQDbVkbMuPKBHi32sbo5KGRGkFwsvsejwz7sGdNQGDg5eN40pCAVpZnkpWFqA0GYx/FthnDzgOMeCH+oiG405Q7ejk6g5d80U27D+i8DSOS+wieUZyC1g/nYrG4PlyS+5M5KmZyzjf+o6kC6htVBoUqkEBQ9H//90O4TtpTT4WpEaTAU4Lg6paratqv4pxobFctgHUArmEOZmh1gs0NZ20IWtTjNfUJH0X4LQweH/72ASS7WPZt4bQkbkd+8J5f812ZqhRXfC7RBrE75KOXLDypbzrwpL7sXEh9ZeJmdhHfGi0lvZ3XdwK5srDa/IwPjNxoc5M8fLp6RmGb0I+IAQ=",
    b"eJydUEtKBDEQvcpQOKDQC9e5igxN2VM2gZiEJC0OTYOfhRuv4B1mIwiDc4bKjaxOR3TAlRBSn/fq82qEtPMECm4G2yXtLDTgXdTFVZcNOE8B5yiCuhoBF5KCSKm9w6Dx2lCL3pPdSmwGkgbFLnyLt3P3mqkQqPF7LIaAu9OSiiS6TwIUo4DfeJ+f8nN+4D0f8it/8pHfV/mFP/IjH/ioVmtZpzWuQ3M+T72YlWCI2vZS7w1qC1Mz/v9tJvl/BC3S/5B0AlVX7jX0PcVEW0nHzhVmWRYm6bz5dQHx65Bac7aG6Qurk57v"
]

import zlib
import base64
import json

templs = []

for i, e in enumerate(es):
    if e == "":
        continue
    base64d = base64.b64decode(e)
    decomp = zlib.decompress(base64d)
    obj = json.loads(decomp)
    obj["position"] = i
    templs.append(obj)
    
module = {
    "handlers": templs
}
result = json.dumps(module, separators=(',', ':'), indent=None)

with open('module.json', 'w') as f:
    f.write(result)
